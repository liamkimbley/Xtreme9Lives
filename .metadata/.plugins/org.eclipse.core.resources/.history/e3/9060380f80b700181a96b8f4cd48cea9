package com.skilldistillery.xtreme.controllers;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.skilldistillery.xtreme.Post;
import com.skilldistillery.xtreme.services.PostService;

@RestController
@RequestMapping("api")
public class PostController {
	
	@Autowired
	private PostService postServ;
	
	@RequestMapping(path="posts", method=RequestMethod.GET)
	public List<Post> index(){
		return postServ.findAllPosts();
	}
	
	@RequestMapping(path="categories/{id}/posts", method=RequestMethod.GET)
	public List<Post> postByCategory(@PathVariable int id){
		return postServ.findPostsByCategoryId(id);
	}

	@RequestMapping(path="posts/{pid}", method=RequestMethod.GET)
	public Post getSinglePost(@PathVariable int pid) {
		return postServ.findPostById(pid);
	}
	
	@RequestMapping(path="posts/search/{keyword}", method=RequestMethod.GET)
	public List<Post> getPostsByKeyword(@PathVariable String keyword) {
		List<Post> posts = new ArrayList<>();
		posts = postServ.searchPostsByName(keyword);
		posts = postServ.searchPostsByTitle(keyword);
		return posts;
	}

	@RequestMapping(path="posts/search/price/{low}/{high}", method=RequestMethod.GET)
	public List<Post> getPostsByKeyword(@PathVariable double low, @PathVariable double high) {
		return postServ.findPostsByPriceRange(low, high);
	}
	
	@RequestMapping(path="posts", method=RequestMethod.POST)
	public Post create(@RequestBody Post post, HttpServletResponse res) {
		Post p = postServ.create(post);
		if (p != null) {
			res.setStatus(201);
		}
		else {
			res.setStatus(500);
		}
		return p;
	}
	
	@RequestMapping(path="posts/{pid}", method=RequestMethod.PATCH)
	public Post updatePost(@PathVariable int pid, @RequestBody Post post, HttpServletResponse res) {
		Post p = postServ.update(pid, post);
		if (p != null) {
			res.setStatus(201);
		}
		else {
			res.setStatus(500);
		}
		return p;
	}
	
	@RequestMapping(path="posts/{pid}", method=RequestMethod.PUT)
	public Post replacePost(@PathVariable int pid, @RequestBody Post post, HttpServletResponse res) {
		Post p = postServ.replace(pid, post);
		if (p != null) {
			res.setStatus(201);
		}
		else {
			res.setStatus(500);
		}
		return p;
	}
	
	@RequestMapping(path="posts/{pid}", method=RequestMethod.DELETE)
	public boolean deletePost(@PathVariable int pid, @RequestBody Post post, HttpServletResponse res) {
		boolean deleted = postServ.delete(pid);
		if (deleted == true) {
			res.setStatus(201);
		}
		else {
			res.setStatus(500);
		}
		return deleted;
	}
	
}
